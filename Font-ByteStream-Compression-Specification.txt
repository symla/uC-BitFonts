This document shall cover how to compress a BitFont as a byte stream.


Stream of bits: (final minimized version)
    - stream of config bits:
        - width byte
        - height byte
        - after 2 config bytes, stream of characterMap follows, sorted by char value:
            - empty bit:
                0 = not empty
                1 = empty
            - preserve bit:
                0 = char unknown
                1 = char known but really empty (e.g. space character)

            --> meanings of empty & preserve bit

                ------#----------#-----------------------------------------
                empty | preserve | meaning
                ------#----------#-----------------------------------------
                  0   #     0    # normal character, read pixels (offsets allowed)
                ------#----------#-----------------------------------------
                  0   #     1    # nonsene state -> bitless-skipping * (no offsets)
                ------#----------#-----------------------------------------
                  1   #     0    # empty -> unknown char (shows 0 char) (no offsets)
                ------#----------#-----------------------------------------
                  1   #     1    # empty -> shall be empty (e.g. space) (no offsets)
                ------#----------#-----------------------------------------

                - * bitless-skipping:
                    - it does not represent a next char, but initializes a skip pointer
                    - only chars with empty = 1 & preserve = 0 can be skipped
                    - after empty & preserve bit follows byte indicating how much
                      many empty chars are skipped least significant bit first
                    - the next empty & preserve pair can be processed normally
                    - alternative to skipping with empty = 1 & preserve = 0
                    - only useful if if skip is 5

            - if empty: skip and read next bit as empty bit of next character
            - if not empty:
                - offset top:    unary encoding + trailing 0 as end
                - offset bottom: unary encoding + trailing 0 as end
                - bitmap:
                    - for each pixel (left to right, top to bottom) [char_width * char_height] times:
                        - 0 bit = pixel is not present / white
                        - 1 bit = pixel is present / black

    - finish!!! -> no end sequence -> trust in the schema :D
    - zero bit padding until full bytes reached


_________________


Stream of bits: (generic version -> DISCARDED)
    - stream of config bits:
        - before each config byte an end bit:
            - 0 = if a config byte follows
            - 1 = if no config byte follows
        - for each config byte a header bit:
                0 = config byte is zero -> skip, treat next bit like next byte header
                1 = config byte follows -> read byte
        - after each config header bit = 1 follows byte as 8 bits
        - after 32 bytes, stream of characterMap follows, sorted by char value:
            - empty bit:
                0 = not empty
                1 = empty
            - preserve bit:
                0 = char unknown
                1 = char known but really empty (e.g. space character)
            - if empty: skip and read next bit as empty bit of next character
            - if not empty:
                - offset top:    unary encoding + trailing 0 as end
                - offset right:  unary encoding + trailing 0 as end
                - offset bottom: unary encoding + trailing 0 as end
                - offset left:   unary encoding + trailing 0 as end
                - bitmap:
                    - for each pixel (left to right, top to bottom) [char_width * char_height] times:
                        - 0 bit = pixel is not present / white
                        - 1 bit = pixel is present / black

    - finish!!! -> no end sequence -> trust in the schema :D
    - zero bit padding until full bytes reached
